// vim: set ft=glsl:

#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_buffer_reference2 : require

#include "common/limits.glsl"
#include "common/rt_types.glsl"
#include "common/random.glsl"

// --------------------- INPUT --------------------- //

struct CameraBuffer {
  mat4 view_proj;
  mat4 view_inverse;
  mat4 proj_inverse;
};

layout (set = 0, binding = 0, std140) uniform CameraUniformBuffer {
  CameraBuffer data[1024];
} camera_buffer;
layout (set = 3, binding = 0, rgba32f) uniform image2D storage_image[];
layout (set = 4, binding = 0) uniform accelerationStructureEXT top_level_as[];

layout (push_constant) uniform Constants {
  vec4 color;
  mat4 mvp;
  uint material_index;
  uint rt_storage_index;
  uint camera_buffer_index;
  uint current_frame;
  uint accum_storage_index;
  uint alb_storage_index;
  uint nrm_storage_index;

  uint pad1;

  vec4 light_col;
  vec4 light_dir;
} push_constant;

// ------------------------------------------------- //

layout(location = 0) rayPayloadEXT RayPayload ray_payload;

vec4 linear_to_gamma(vec4 color) {
  return vec4(sqrt(color.x), sqrt(color.y), sqrt(color.z), color.w);
}

void main() {
  // seed for rng
  uint seed = ((uint(gl_LaunchIDEXT.y) * uint(gl_LaunchSizeEXT.x) + gl_LaunchIDEXT.x) + push_constant.current_frame * gl_LaunchSizeEXT.x * gl_LaunchSizeEXT.y) % UINT32_MAX;
  rand(seed);

  const vec2 pixel_center = vec2(gl_LaunchIDEXT.xy) + vec2(0.5) + vec2(rand(seed) - 0.5f, rand(seed) - 0.5f);
  const vec2 in_uv = pixel_center / vec2(gl_LaunchSizeEXT.xy);
  vec2 d = in_uv * 2.0 - 1.0;

  readonly CameraBuffer camera_data = camera_buffer.data[push_constant.camera_buffer_index];

  vec4 origin = camera_data.view_inverse * vec4(0, 0, 0, 1);
  vec4 target = camera_data.proj_inverse * vec4(d.x, -d.y, 1, 1);
  vec4 direction = camera_data.view_inverse * vec4(normalize(target.xyz), 0);

  uint ray_flags = gl_RayFlagsOpaqueEXT;
  float t_min = 0.001;
  float t_max = 10000.0;

  vec3 color = vec3(1.0);
  float factor = 1.0f;

  const vec3 inverse_light_dir = push_constant.light_dir.xyz;
  const vec3 light_col         = push_constant.light_col.xyz;
  const float light_intensity  = push_constant.light_col.w;

  vec3 first_hit_color = vec3(0.0f);
  vec3 first_hit_normal = vec3(0.0f);

  for (int i = 0; i < MAX_RAY_RECURSION; i++) {
    ray_payload.ray_dir = direction.xyz;
    
    traceRayEXT(top_level_as[0], ray_flags, 0xFF, 0, 0, 0, origin.xyz, t_min, direction.xyz, t_max, 0);
    const vec3 hit_color = ray_payload.material.albedo;

    if (i == 0) {
      first_hit_color = hit_color;
      first_hit_normal = ray_payload.normal;
    }

    if (ray_payload.distance < 0.0) {
      color *= hit_color * factor;
      break;
    } else if (ray_payload.distance > 0.001) {
      const vec4 hit_pos = origin + direction * ray_payload.distance;
      origin.xyz = hit_pos.xyz + ray_payload.normal * 0.001;
      direction.xyz = ray_payload.normal + rand_unit_vector(seed); // rand_in_hemisphere(seed, ray_payload.normal); // reflect(direction.xyz, ray_payload.normal);
      color *= hit_color * factor;

      const vec3 shadow_ray_dir = normalize(inverse_light_dir + rand_in_unit_sphere(seed) * 0.05f);
      traceRayEXT(top_level_as[0], ray_flags, 0xFF, 0, 0, 0, origin.xyz, 0.001, shadow_ray_dir, 10000.0, 0);
      if (ray_payload.distance < 0.0) {
        color *= light_col * light_intensity;
      } else {
        // color *= light_col * light_intensity * 0.3;
      }
    }

    factor *= 0.5f;
  }

  const ivec2 storageIndex = ivec2(gl_LaunchIDEXT.xy);

  vec4 accum_color = push_constant.current_frame == 0 ? vec4(0.0f) : imageLoad(storage_image[push_constant.accum_storage_index], storageIndex);
  accum_color += vec4(color, 1.0f);
  imageStore(storage_image[push_constant.accum_storage_index], storageIndex, accum_color);

  const vec4 final_color = accum_color / accum_color.w;
  imageStore(storage_image[push_constant.rt_storage_index], storageIndex, linear_to_gamma(final_color));
  imageStore(storage_image[push_constant.alb_storage_index], storageIndex, vec4(first_hit_color, 1.0f));
  imageStore(storage_image[push_constant.nrm_storage_index], storageIndex, vec4(first_hit_normal, 1.0f));
}
